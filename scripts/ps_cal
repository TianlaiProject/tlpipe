#!/usr/bin/env python

"""Calibration using a strong point source.

Authors: Shifan Zuo
Date:    2022-09-19
Email:   sfzuo@bao.ac.cn
"""

import os
import logging
import argparse
from tlpipe.utils.argparse_action import EvalAction, str2bool


logging.basicConfig(level=logging.INFO)


parser = argparse.ArgumentParser(description='Calibration using a strong point source.')
parser.add_argument('input_files', type=str, nargs='+', help='Input visibility hdf5 files.')
parser.add_argument('-o', '--output_files', type=str, nargs='*', default=None, help='Output hdf5 files.')
parser.add_argument('--outdir', type=str, default='./', help='Output directory.')
parser.add_argument('-t', '--process_timing', default=False, type=str2bool, choices=[True, False], help='Show timing of the task.')
parser.add_argument('--time_start', dest='start', type=int, default=0, help='Select time start index to read.')
parser.add_argument('--time_stop', dest='stop', type=int, default=None, help='Select time stop index to read.')
parser.add_argument('--freq_select', type=str, default=(0, None), action=EvalAction, help='Select frequency to read.')
parser.add_argument('--pol_select', type=str, default=(0, None), action=EvalAction, help='Select polarization to read.')
parser.add_argument('--feed_select', type=str, default=(0, None), action=EvalAction, help='Select feeds to read.')
parser.add_argument('--show_info', default=False, type=str2bool, choices=[True, False], help='Show informations of internal data.')
parser.add_argument('--calibrator', default='cyg', type=str, help='The calibrator to use.')
parser.add_argument('--vis_conj', default=False, type=str2bool, choices=[True, False], help='If True, conjugate the vis first.')
parser.add_argument('--zero_diag', default=False, type=str2bool, choices=[True, False], help='If True, fill 0 to the diagonal of vis matrix before SPCA.')
parser.add_argument('--span', default=60, type=int, help='Time span used to do the calibration.')
parser.add_argument('--reserve_high_gain', default=False, type=str2bool, choices=[True, False], help='If True, will not flag those gain significantly higher than mean value, only flag significantly lower ones.')
parser.add_argument('--rpca_max_iter', default=200, type=int, help='Max iteration number for rpca decomposition.')
parser.add_argument('--plot_figs', default=False, type=str2bool, choices=[True, False], help='Whether to plot figures.')
parser.add_argument('--fig_name', default='gain/gain', type=str, help='Figure name prefix.')
parser.add_argument('--save_src_vis', default=False, type=str2bool, choices=[True, False], help='Save the extracted calibrator visibility.')
parser.add_argument('--src_vis_file', default='src_vis/src_vis.hdf5', type=str, help='File name of the saved src visibility.')
parser.add_argument('--subtract_src', default=False, type=str2bool, choices=[True, False], help='Subtract visibilities of the calibrator from data.')
parser.add_argument('--replace_with_src', default=False, type=str2bool, choices=[True, False], help='Replace vis with the subtracted src_vis, only work when subtract_src = True.')
parser.add_argument('--apply_gain', default=True, type=str2bool, choices=[True, False], help='Apply the solved gain to data.')
parser.add_argument('--save_gain', default=False, type=str2bool, choices=[True, False], help='Save the solved gain to file.')
parser.add_argument('--save_phs_change', default=False, type=str2bool, choices=[True, False], help='Save also the phase change to file.')
parser.add_argument('--gain_file', default='gain/gain.hdf5', type=str, help='Saved gain file name prefix.')


args = parser.parse_args()
args_dict = vars(args)

# set environment var
os.environ['TL_OUTPUT'] = args_dict['outdir'] + '/'


from tlpipe.timestream import ps_cal

PsCal = ps_cal.PsCal

PsCal.params_init.update(args_dict)
cal = PsCal()
cal.setup()
cal.next()
cal.finish()