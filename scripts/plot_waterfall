#!/usr/bin/env python

"""Plot waterfall images.

Authors: Shifan Zuo
Date:    2022-07-03
Email:   sfzuo@bao.ac.cn
"""

import os
import logging
import argparse
from tlpipe.utils.argparse_action import EvalAction, str2bool


logging.basicConfig(level=logging.INFO)


parser = argparse.ArgumentParser(description='Plot waterfall images.')
parser.add_argument('input_files', type=str, nargs='+', help='Input visibility hdf5 files.')
parser.add_argument('-o', '--output_files', type=str, nargs='*', default=None, help='Output hdf5 files.')
parser.add_argument('--outdir', type=str, default='./', help='Output directory.')
parser.add_argument('-t', '--process_timing', defaut=False, type=str2bool, choices=[True, False], help='Show timing of the task.')
parser.add_argument('--time_start', dest='start', type=int, default=0, help='Select time start index to read.')
parser.add_argument('--time_stop', dest='stop', type=int, default=None, help='Select time stop index to read.')
parser.add_argument('--freq_select', type=str, default=(0, None), action=EvalAction, help='Select frequency to read.')
parser.add_argument('--pol_select', type=str, default=(0, None), action=EvalAction, help='Select polarization to read.')
parser.add_argument('--feed_select', type=str, default=(0, None), action=EvalAction, help='Select feeds to read.')
parser.add_argument('--show_progress', defaut=False, type=str2bool, choices=[True, False], help='Show progress of executing.')
parser.add_argument('--show_info', defaut=False, type=str2bool, choices=[True, False], help='Show informations of internal data.')
parser.add_argument('--bl_incl', action=EvalAction, default='all', help='A list of baselines (bl1, bl2) to plot. Use "all" to plot all baselines.')
parser.add_argument('--bl_excl', action=EvalAction, default=[], help='A list of baselines (bl1, bl2) to be excluded in plot.')
parser.add_argument('--flag_mask', defaut=False, type=str2bool, choices=[True, False], help='Flag masked values.')
parser.add_argument('--flag_ns', defaut=False, type=str2bool, choices=[True, False], help='Flag noise source values.')
parser.add_argument('--interpolate_ns', defaut=False, type=str2bool, choices=[True, False], help='Complete noise source values by interpolation.')
parser.add_argument('--y_axis', default='time', choices=['time', 'jul_date', 'ra'], help='The y axis of the plot, can be "time", "jul_date" or "ra".')
parser.add_argument('--use_utc', defaut=False, type=str2bool, choices=[True, False], help='Whether to use UTC time, default use Beijing time.')
parser.add_argument('--plot_abs', defaut=False, type=str2bool, choices=[True, False], help='Plot also the amplitude of the visibility.')
parser.add_argument('--abs_only', defaut=False, type=str2bool, choices=[True, False], help='Plot only the amplitude of the visibility.')
parser.add_argument('--gray_color', defaut=False, type=str2bool, choices=[True, False], help='Use gray color plot.')
parser.add_argument('--color_flag', defaut=False, type=str2bool, choices=[True, False], help='Use color to mark flagged values.')
parser.add_argument('--flag_color', default='yellow', help='The color to use to mark the flagged values.')
parser.add_argument('--transpose', defaut=False, type=str2bool, choices=[True, False], help='Plot the transposed visibility.')
parser.add_argument('--fig_name', default='wf/vis', help='The figure name prefix to use to save the plots.')
parser.add_argument('--rotate_xdate', defaut=False, type=str2bool, choices=[True, False], help='True to rotate xaxis date ticks, else half the number of date ticks.')
parser.add_argument('--feed_no', defaut=False, type=str2bool, choices=[True, False], help='True to use feed number (true baseline) else use channel no.')
parser.add_argument('--order_bl', defaut=True, type=str2bool, choices=[True, False], help='True to make small feed no first.')

args = parser.parse_args()
args_dict = vars(args)

# set environment var
os.environ['TL_OUTPUT'] = args_dict['outdir'] + '/'


from tlpipe.plot import plot_waterfall

Plot = plot_waterfall.Plot

# prefix = dispatch.Dispatch.prefix
Plot.params_init.update(args_dict)
plot = Plot()
plot.setup()
plot.next()
plot.finish()