#!/usr/bin/env python

"""RFI flagging by using the SumThreshold method.

Authors: Shifan Zuo
Date:    2022-09-19
Email:   sfzuo@bao.ac.cn
"""

import os
import logging
import argparse
from tlpipe.utils.argparse_action import EvalAction


logging.basicConfig(level=logging.INFO)


parser = argparse.ArgumentParser(description='RFI flagging by using the SumThreshold method.')
parser.add_argument('input_files', type=str, nargs='+', help='Input visibility hdf5 files.')
parser.add_argument('-o', '--output_files', type=str, nargs='*', default=None, help='Output hdf5 files.')
parser.add_argument('--outdir', type=str, default='./', help='Output directory.')
parser.add_argument('-t', '--process_timing', default=False, type=bool, choices=[True, False], help='Show timing of the task.')
parser.add_argument('--time_start', dest='start', type=int, default=0, help='Select time start index to read.')
parser.add_argument('--time_stop', dest='stop', type=int, default=None, help='Select time stop index to read.')
parser.add_argument('--freq_select', type=str, default=(0, None), action=EvalAction, help='Select frequency to read.')
parser.add_argument('--pol_select', type=str, default=(0, None), action=EvalAction, help='Select polarization to read.')
parser.add_argument('--feed_select', type=str, default=(0, None), action=EvalAction, help='Select feeds to read.')
parser.add_argument('--show_info', default=False, type=bool, choices=[True, False], help='Show informations of internal data.')
parser.add_argument('--first_threshold', default=6.0, type=float, help='The first threshold to use.')
parser.add_argument('--exp_factor', default=1.5, type=float, help='The exponential factor.')
parser.add_argument('--distribution', default='Rayleigh', type=str, help='Data distribution to use.')
parser.add_argument('--max_threshold_len', default=1024, type=int, help='Maximum threshold length.')
parser.add_argument('--sensitivity', default=1.0, type=float, help='Sensitivity.')
parser.add_argument('--min_connected', default=1, type=int, help='Minimum connected segments.')
parser.add_argument('--flag_direction', default=('time', 'freq'), type=str, action=EvalAction, help='Flagging directions.')
parser.add_argument('--tk_size', default=1.0, type=float, help='Kernal size in time direction.')
parser.add_argument('--fk_size', default=3.0, type=float, help='Kernal size in frequency direction.')
parser.add_argument('--threshold_num', default=2, type=int, help='Number of rounds to to the flagging.')


args = parser.parse_args()
args_dict = vars(args)

# set environment var
os.environ['TL_OUTPUT'] = args_dict['outdir'] + '/'


from tlpipe.timestream import rfi_flagging

Flag = rfi_flagging.Flag

Flag.params_init.update(args_dict)
flag = Flag()
flag.setup()
flag.next()
flag.finish()