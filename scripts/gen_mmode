#!/usr/bin/env python

"""Generate m-mode by DFT of the timestream data.

Authors: Shifan Zuo
Date:    2022-09-19
Email:   sfzuo@bao.ac.cn
"""

import os
import logging
import argparse
from tlpipe.utils.argparse_action import EvalAction


logging.basicConfig(level=logging.INFO)


parser = argparse.ArgumentParser(description='Generate m-mode by DFT of the timestream data.')
parser.add_argument('input_files', type=str, nargs='+', help='Input visibility hdf5 files.')
parser.add_argument('--outdir', type=str, default='./', help='Output directory.')
parser.add_argument('-t', '--process_timing', default=False, type=bool, choices=[True, False], help='Show timing of the task.')
parser.add_argument('--time_start', dest='start', type=int, default=0, help='Select time start index to read.')
parser.add_argument('--time_stop', dest='stop', type=int, default=None, help='Select time stop index to read.')
parser.add_argument('--freq_select', type=str, default=(0, None), action=EvalAction, help='Select frequency to read.')
parser.add_argument('--pol_select', type=str, default=(0, None), action=EvalAction, help='Select polarization to read.')
parser.add_argument('--feed_select', type=str, default=(0, None), action=EvalAction, help='Select feeds to read.')
parser.add_argument('--show_info', default=False, type=bool, choices=[True, False], help='Show informations of internal data.')
parser.add_argument('--tsys', default=50.0, type=float, help='System temperature, in unit K.')
parser.add_argument('--accuracy_boost', default=1.0, type=float, help='Accuracy boost.')
parser.add_argument('--l_boost', default=1.0, type=float, help='Multipole l boost.')
parser.add_argument('--bl_range', default=[0.0, 1.0e7], type=str, action=EvalAction, help='Baseline length range, in unit meter.')
parser.add_argument('--auto_correlations', default=False, type=bool, choices=[True, False], help='Include auto-correlation or not.')
parser.add_argument('--lmax', default=None, type=float, help='Maximum l to compute.')
parser.add_argument('--mmax', default=None, type=float, help='Maximum m to compute.')
parser.add_argument('--pol', default='xx', type=str, choices=['xx', 'yy', 'I'], help='Which polarization to generate.')
parser.add_argument('--beam_dir', default='map/bt', type=str, help='Directory to save the generated beam transfer matrices.')
parser.add_argument('--noise_weight', default=True, type=bool, choices=[True, False], help='Whether to use noise weight.')
parser.add_argument('--ts_dir', default='map/ts', type=str, help='Directory to save the generated timestream.')
parser.add_argument('--ts_name', default='ts', type=str, help='The name of the generated timestream.')
parser.add_argument('--no_m_zero', default=True, type=bool, choices=[True, False], help='Not use m = 0 modes.')


args = parser.parse_args()
args_dict = vars(args)

# set environment var
os.environ['TL_OUTPUT'] = args_dict['outdir'] + '/'


from tlpipe.timestream import gen_mmode

Gen = gen_mmode.GenMmode

Gen.params_init.update(args_dict)
gen = Gen()
gen.setup()
gen.next()
gen.finish()