"""Normalize the m-mode generated by DFT of the timestream data.

Inheritance diagram
-------------------

.. inheritance-diagram:: NormalizeMmode
   :parts: 2

"""

import os
import numpy as np
import h5py
from . import timestream_task

from caput import mpiutil
from tlpipe.utils.path_util import output_path
from tlpipe.map.drift.pipeline import timestream


class NormalizeMmode(timestream_task.TimestreamTask):
    """Normalize the m-mode generated by DFT of the timestream data."""

    params_init = {
                    'ts_dir': 'map/ts',
                    'ts_name': 'ts',
                  }

    prefix = 'nm_'

    def process(self, tstream):

        bt = tstream.beamtransfer
        tel = bt.telescope
        mmode_dir = tstream.output_directory + '/mmodes'
        count_file = mmode_dir + '/count.hdf5'
        if os.path.exists(count_file):
            # get count
            with h5py.File(count_file, 'r') as f:
                N = f['count'][:]
            # normalize mmode
            for mi in mpiutil.mpirange(tel.mmax+1):
                with h5py.File(tstream._mfile(mi), 'r+') as f:
                    f['/mmode'][:] /= N[:, np.newaxis, :]
            mpiutil.barrier()
            # delete the count file
            if mpiutil.rank0:
                os.remove(count_file)
        else:
            if mpiutil.rank0:
                print('Count file %s does not exist, do noting...' % count_file)

        # mpiutil.barrier()

        return tstream

    def read_process_write(self, tstream):
        """Overwrite the method of superclass."""

        if isinstance(tstream, timestream.Timestream):
            return self.process(tstream)
        else:
            ts_dir = output_path(self.params['ts_dir'])
            ts_name = self.params['ts_name']
            if mpiutil.rank0:
                print('Try to load tstream from %s/%s' % (ts_dir, ts_name))
            tstream = timestream.Timestream.load(ts_dir, ts_name)
            return self.process(tstream)